***Table Delete****
DROP TABLE facality;

***Table create***
CREATE TABLE student(
    id int,
    name varchar(20),
    dept varchar(10),
    primary key(id)
);

***Add column***
ALTER TABLE student
ADD COLUMN tution int;

***Delete Column ***
ALTER TABLE facality
DROP salary;

***Value inset***
INSERT INTO student
VALUES (101,"MD Nasim Reza","CSE",13000),
(102,"MD Aziz","CSE",11000),
(103,"MD Sajed","CSE",14000),
(104,"MD. Feroz","CSE",10000),
(105,"MD Efian","CSE",15000);

***All Data show***
SELECT * FROM student;

***Column Data Show***
step1. SELECT id FROM student;
step2. SELECT id,tution FROM student;

***Where Conditon use***
step1. SELECT tution FROM student
WHERE tution>=12000;

step2. SELECT id, tution FROM student
WHERE tution>=12000;

step3. SELECT id,name,tution FROM student
WHERE tution>=14000;

step4. SELECT fid, (salary+salary*.10) as updetde_salary FROM facality;
ste5. SELECT MAX(salary) as Maximum_salary FROM facality;
step6 SELECT MAX(salary) as Maximum_salary,AVG(salary) FROM facality;

step7.SELECT name, id, City FROM student
WHERE Gender="Male";

***New Column insert valu***
UPDATE  facality
SET salary=23000 WHERE fid=101;

UPDATE facality
SET slary=23000,
WHERE fid BETWEEN 102 AND 104;

***Delete row data***
DELETE FROM facality
WHERE fid=103;

***Distinct use***
ELECT DISTINCT City FROM student;

***Limit use***
step1.SELECT * FROM student
LIMIT 4;
step2. SELECT * FROM student
LIMIT 2,3;

***Order by claue***
step1. SELECT name FROM student //assending oreder;
ORDER BY name;
step2. SELECT id,name FROM student //assending oreder;
ORDER BY name;
step3. SELECT id,name FROM student //dessending oreder
ORDER BY name DESC;
step4. SELECT id,name,tution FROM student //multiple column sorted
ORDER BY name,tution;

***Certesian Product***
SELECT * FROM
student,facality;

***Betwen operation***
SELECT id,name ,Gender FROM student
WHERE id BETWEEN 102 AND  104;

***And / OR operation***
step1. SELECT* FROM student
WHERE Gender="Male" OR Cgp>3.50;

step 2. SELECT* FROM student
WHERE Gender="Male" AND Cgp>3.55;

step3.SELECT * FROM student
WHERE City="Meherpur"
			AND
            (Gender="Male" OR Cgp>=3.50);


***IN / NOT IN Operator use***
step1. SELECT * FROM student
WHERE City IN ("Meherpur", "Cumilla", "Nator");

step2. SELECT * FROM student
WHERE City NOT IN("Meherpur", "Cumilla", "Nator");

***String Search(By Like)***
step1. SELECT City,name FROM student
WHERE name LIKE '%a';

step2.SELECT id,City,name FROM student
WHERE name LIKE '%sim%';

step3. SELECT id,City,name FROM student
WHERE name LIKE '%z%';

step4.SELECT id,City,name FROM student
WHERE name LIKE 'Md%';

step5. SELECT id,City,name FROM student
WHERE name LIKE '___n%';

step5.SELECT name,id,City FROM student
WHERE name RLIKE '^[maef]';

***INER JOIN***
step1. SELECT A.std_id,std_name, std_blood FROM tbl_student A
INNER JOIN tbl_marks B
ON A.std_id=B.std_id;

step2.SELECT A.std_id,std_name,std_gender,thirty,mid,final FROM tbl_student A
INNER JOIN tbl_marks B ON A.std_id=B.std_id
WHERE std_gender='F' AND mid>=25;

stp3. SELECT A.std_id ,thirty,mid,final FROM tbl_student A
INNER JOIN tbl_marks B 
ON A.std_id=B.std_id
WHERE std_gender='M' and mid+final+thirty>=90;

***Group BY***
SELECT std_gender,COUNT(std_id) as id_count FROM tbl_student
GROUP BY std_gender;


***627. Swap Salary***
UPDATE salary
SET sex = CASE WHEN sex='m' THEN 'f' WHEN sex='f' THEN 'm' END;

***595. Big Countries***
SELECT name,population,area FROM world
WHERE area>=3000000 OR population>=25000000;

***584. Find Customer Referee***
SELECT name FROM Customer
WHERE referee_id!=2 OR referee_id IS NULL;


****1965. Employees With Missing Informati****

SELECT A.employee_id FROM (SELECT employee_id FROM employees UNION SELECT employee_id FROM salaries) AS A
LEFT JOIN salaries S ON A.employee_id=S.employee_id
LEFT JOIN employees E ON E.employee_id=A.employee_id
WHERE E.name IS NULL OR S.salary IS NULL
ORDER BY A.employee_id;

****------******
SELECT A.employee_id,S.salary, E.name FROM (SELECT employee_id FROM employees UNION SELECT employee_id FROM salaries) AS A
LEFT JOIN salaries S ON A.employee_id=S.employee_id
LEFT JOIN employees E ON E.employee_id=A.employee_id
WHERE E.name IS NULL OR S.salary IS NULL;

***196. Delete Duplicate Emails***
DELETE t1 FROM person AS t1
INNER JOIN person AS t2
WHERE t1.id>t2.id AND t1.email=t2.email;

***1873. Calculate Special Bonus***
SELECT employee_id,
CASE  WHEN employee_id%2=0 THEN 0 WHEN name LIKE 'M%' THEN 0  ELSE  salary END AS bonus
FROM employees
ORDER BY employee_id;

***183. Customers Who Never Order***
SELECT name as Customers  FROM customers A
LEFT JOIN orders B ON A.id=B.customerId
WHERE B.id IS NULL;

***1757. Recyclable and Low Fat Products***
SELECT product_id FROM products
WHERE low_fats='Y' AND recyclable='Y';

***1667. Fix Names in a Table***
SELECT user_id, CONCAT(upper(substring(name,1,1)),lower(substring(name,2))) as name FROM users
ORDER BY user_id;

***1527. Patients With a Condition***
SELECT patient_id,patient_name,conditions FROM patients
WHERE conditions LIKE 'DIAB1%' OR conditions LIKE '% DIAB1%';

***1484. Group Sold Products By The Date***
SELECT sell_date, COUNT(DISTINCT product) as num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) AS products FROM activities
GROUP BY sell_date;
/// another way separator any charcter use
//// GROUP_CONCAT(DISTINCT product separator ',' ORDER BY product)

***1795. Rearrange Products Table*** ///union operation
SELECT product_id,'store1' as store, A.store1 as price FROM products A
WHERE A.store1 IS NOT NULL
	UNION 
		SELECT product_id,'store2' as store, B.store2 AS price FROM products B
        WHERE B.store2 IS NOT NULL
        UNION
        SELECT product_id,'store3' AS store,C.store3 AS price FROM products C
        WHERE C.store3 IS NOT NULL ORDER BY product_id;
	
***176. Second Highest Salary***

SELECT MAX(salary) AS SecondHighestSalary FROM employee
WHERE salary<(SELECT MAX(salary)FROM employee);

***1141. User Activity for the Past 30 Days I***//Group by use

SELECT activity_date AS day, COUNT(DISTINCT user_id) AS active_users FROM activity
WHERE (activity_date >= '2019-06-28' AND activity_date<='2019-06-30') OR (activity_date>='2019-07-01' AND activity_date<='2019-07-27')
GROUP BY activity_date;

***1693. Daily Leads and Partners***///Group by special case

SELECT date_id,make_name,COUNT(DISTINCT lead_id) AS  unique_leads, COUNT(DISTINCT partner_id) AS unique_partners  FROM dailysales
GROUP BY date_id,make_name;

***586. Customer Placing the Largest Number of Orders***///Group by order by count use

SELECT customer_number FROM orders
GROUP BY customer_number
ORDER BY COUNT(customer_number) DESC
LIMIT 1;

***511. Game Play Analysis I***
SELECT player_id,min(event_date) AS first_login FROM activity
GROUP BY player_id;

***1890. The Latest Login in 2020***
SELECT user_id,max(time_stamp) AS last_stamp FROM logins
WHERE time_stamp>='2020-01-01' and time_stamp<'2021-01-01'
GROUP BY user_id;

***1741. Find Total Time Spent by Each Employee***
SELECT event_day AS day,emp_id, sum(out_time-in_time) AS total_time FROM employees
GROUP BY event_day,emp_id;

***1393. Capital Gain/Loss***

SELECT A.stock_name,p1-p2 AS capital_gain_loss FROM (SELECT stock_name,SUM(price)AS p1 FROM stocks WHERE operation='Sell' GROUP BY stock_name) as A,(SELECT stock_name,SUM(price)AS p2 FROM stocks WHERE operation='Buy' GROUP BY stock_name) AS B
WHERE A.Stock_name=B.stock_name;

***1407. Top Travellers***
SELECT name, CASE WHEN R.distance IS NULL THEN 0 ELSE sum(distance) END AS travelled_distance  FROM users U 
LEFT JOIN rides R ON U.id=R.user_id
GROUP BY u.id
ORDER BY  travelled_distance DESC, name asc;

***1158. Market Analysis I***
SELECT  U.user_id AS buyer_id, U.join_date,COUNT(O.order_date) as orders_in_2019 FROM users U 
LEFT JOIN orders O ON U.user_id=O.buyer_id and year(O.order_date)='2019'
GROUP BY U.user_id;

***182. Duplicate Emails***
SELECT email as Email  FROM person
GROUP BY email
HAVING COUNT(email)>=2;

***1050. Actors and Directors Who Cooperated At Least Three Times***
SELECT actor_id,director_id FROM actordirector
GROUP BY actor_id,director_id
HAVING COUNT(actor_id)>=3;

***1587. Bank Account Summary II***
SELECT U.name,B.sumation AS balance FROM users U,(SELECT account, sum(amount) AS sumation FROM transactions
GROUP BY account) AS B
WHERE U.account=B.account AND B.sumation>=10000;

***1084. Sales Analysis III***
SELECT S.product_id,P.product_name from sales S
LEFT JOIN product P ON S.product_id=P.product_id
GROUP BY S.product_id
HAVING  min(S.sale_date)>='2019-01-01' AND  max(S.sale_date)<='2019-03-31';
